import argparse
import numpy as np
import seaborn as sns
import tensorflow as tf
import time
import pickle
import torch
from matplotlib import pyplot as plt

import maddpg.common.tf_util as U
from maddpg.trainer.maddpg import MADDPGAgentTrainer
from maddpg.trainer.maddpg_approx import MADDPGApproxAgentTrainer
import tensorflow.contrib.layers as layers
from gym.spaces import Box, Dict, Discrete, MultiBinary, MultiDiscrete


def parse_args():
    parser = argparse.ArgumentParser("Reinforcement Learning experiments for multiagent environments")
    # Environment
    parser.add_argument("--scenario", type=str, default="simple_speaker_listener", help="name of the scenario script")
    parser.add_argument("--max-episode-len", type=int, default=25, help="maximum episode length")
    parser.add_argument("--num-episodes", type=int, default=10000, help="number of episodes")
    parser.add_argument("--num-adversaries", type=int, default=0, help="number of adversaries")
    parser.add_argument("--good-policy", type=str, default="maddpg", help="policy for good agents")
    parser.add_argument("--adv-policy", type=str, default="maddpg", help="policy of adversaries")
    # Core training parameters
    parser.add_argument("--lr", type=float, default=1e-2, help="learning rate for Adam optimizer")
    parser.add_argument("--gamma", type=float, default=0.95, help="discount factor")
    parser.add_argument("--batch-size", type=int, default=1024, help="number of episodes to optimize at the same time")
    parser.add_argument("--num-units", type=int, default=64, help="number of units in the mlp")
    # Checkpointing
    parser.add_argument("--exp-name", type=str, default=None, help="name of the experiment")
    parser.add_argument("--save-dir", type=str, default="/tmp/policy/", help="directory in which training state and "
                                                                             "model should be saved")
    parser.add_argument("--save-rate", type=int, default=1000, help="save model once every time this many episodes "
                                                                    "are completed")
    parser.add_argument("--load-dir", type=str, default="", help="directory in which training state and model are "
                                                                 "loaded")
    # Evaluation
    parser.add_argument("--restore", action="store_true", default=False)
    parser.add_argument("--display", action="store_true", default=False)
    parser.add_argument("--benchmark", action="store_true", default=False)
    parser.add_argument("--benchmark-iters", type=int, default=100000, help="number of iterations run for benchmarking")
    parser.add_argument("--benchmark-dir", type=str, default="./benchmark_files/", help="directory where benchmark "
                                                                                        "data is saved")
    parser.add_argument("--plots-dir", type=str, default="./learning_curves/",
                        help="directory where plot data is saved")
    return parser.parse_args()


def mlp_model(input, num_outputs, scope, reuse=False, num_units=64, rnn_cell=None):
    # This model takes as input an observation and returns values of all actions
    with tf.variable_scope(scope, reuse=reuse):
        out = input
        out = layers.fully_connected(out, num_outputs=num_units, activation_fn=tf.nn.relu)
        out = layers.fully_connected(out, num_outputs=num_units, activation_fn=tf.nn.relu)
        out = layers.fully_connected(out, num_outputs=num_outputs, activation_fn=None)
        return out


def make_env(scenario_name, arglist, benchmark=False):
    from mpe.multiagent.environment import MultiAgentEnv
    import mpe.multiagent.scenarios as scenarios

    # load scenario from script
    scenario = scenarios.load(scenario_name + ".py").Scenario()
    # print("aaa")
    # print(scenario)
    # create world
    world = scenario.make_world()
    # create multiagent environment
    # if benchmark:
    #     env = MultiAgentEnv(world, scenario.reset_world, scenario.reward, scenario.observation, scenario.benchmark_data)
    # else:
    env = MultiAgentEnv(world, scenario.reset_world, scenario.reward, scenario.observation)
    return env


def get_trainers(env, num_adversaries, obs_shape_n, arglist):
    trainers = []
    model = mlp_model
    trainer = MADDPGApproxAgentTrainer
    for i in range(num_adversaries):
        trainers.append(trainer(
            "agent_%d" % i, model, obs_shape_n, env.action_space, i, arglist,
            local_q_func=(arglist.adv_policy == 'ddpg')))
    for i in range(num_adversaries, env.n):
        trainers.append(trainer(
            "agent_%d" % i, model, obs_shape_n, env.action_space, i, arglist,
            local_q_func=(arglist.good_policy == 'ddpg')))
    return trainers


def train(arglist):
    values = []

    with U.single_threaded_session():
        # Create environment
        env = make_env(arglist.scenario, arglist, arglist.benchmark)
        # Create agent trainers
        obs_shape_n = [env.observation_space[i].shape for i in range(env.n)]
        num_adversaries = min(env.n, arglist.num_adversaries)
        trainers = get_trainers(env, num_adversaries, obs_shape_n, arglist)
        print('Using good policy {} and adv policy {}'.format(arglist.good_policy, arglist.adv_policy))

        # Initialize
        U.initialize()

        # Load previous results, if necessary
        if arglist.load_dir == "":
            arglist.load_dir = arglist.save_dir
        if arglist.display or arglist.restore or arglist.benchmark:
            print('Loading previous state...')
            U.load_state(arglist.load_dir)

        episode_rewards = [0.0]  # sum of rewards for all agents
        agent_rewards = [[0.0] for _ in range(env.n)]  # individual agent reward
        final_ep_rewards = []  # sum of rewards for training curve
        final_ep_ag_rewards = []  # agent rewards for training curve
        agent_info = [[[]]]  # placeholder for benchmarking info
        saver = tf.compat.v1.train.Saver()
        obs_n = env.reset()
        episode_step = 0
        train_step = 0
        t_start = time.time()
        # observation_sizes = extract_sizes(env.observation_space)
        # action_sizes = extract_sizes(env.action_space)
        # algo = RND(observation_sizes, action_sizes)

        print('Starting iterations...')
        while True:
            # get action
            action_n = [agent.action(obs) for agent, obs in zip(trainers, obs_n)]
            # environment step
            new_obs_n, rew_n, done_n, info_n = env.step(action_n)
            episode_step += 1
            done = all(done_n)
            terminal = (episode_step >= arglist.max_episode_len)
            # collect experience
            for i, agent in enumerate(trainers):
                # agent.experience(obs_n[i], action_n[i], rew_n[i], new_obs_n[i], done_n[i], terminal)
                if not arglist.display:
                    curiosities = agent.algo.compute_intrinsic_reward(torch.FloatTensor(obs_n[i]),
                                                                      torch.FloatTensor(action_n[i]),
                                                                      torch.FloatTensor(new_obs_n[i]), False, True)
                    rew_n[i] += (curiosities.item()/10)


                agent.experience(obs_n[i], action_n[i], rew_n[i], new_obs_n[i], done_n[i], terminal)

            obs_n = new_obs_n

            for i, rew in enumerate(rew_n):
                episode_rewards[-1] += rew
                agent_rewards[i][-1] += rew

            if done or terminal:
                obs_n = env.reset()
                episode_step = 0
                episode_rewards.append(0)
                for a in agent_rewards:
                    a.append(0)
                agent_info.append([[]])

            # increment global step counter
            train_step += 1

            # for displaying learned policies
            if arglist.display:
                time.sleep(0.1)
                env.render()
                continue

            # update all trainers, if not in display or benchmark mode
            loss = None
            for agent in trainers:
                agent.preupdate()
            for agent in trainers:
                # normal
                loss = agent.update(trainers)  # , train_step)
                # approx
                # loss = agent.update(trainers)
            if terminal and len(episode_rewards) % 100 == 0:
                values.append(np.mean(episode_rewards[-arglist.save_rate:]))

            # save model, display training output
            if terminal and (len(episode_rewards) % arglist.save_rate == 0):
                U.save_state(arglist.save_dir, saver=saver)
                # print statement depends on whether or not there are adversaries
                if num_adversaries == 0:
                    print("steps: {}, episodes: {}, mean episode reward: {}, time: {}".format(
                        train_step, len(episode_rewards), np.mean(episode_rewards[-arglist.save_rate:]),
                        round(time.time() - t_start, 3)))
                else:
                    print("steps: {}, episodes: {}, mean episode reward: {}, agent episode reward: {}, time: {}".format(
                        train_step, len(episode_rewards), np.mean(episode_rewards[-arglist.save_rate:]),
                        [np.mean(rew[-arglist.save_rate:]) for rew in agent_rewards], round(time.time() - t_start, 3)))
                t_start = time.time()
                # Keep track of final episode reward
                final_ep_rewards.append(np.mean(episode_rewards[-arglist.save_rate:]))
                for rew in agent_rewards:
                    final_ep_ag_rewards.append(np.mean(rew[-arglist.save_rate:]))

            # saves final episode reward for plotting training curve later
            if len(episode_rewards) > arglist.num_episodes:
                rew_file_name = str(arglist.plots_dir) + 'final_rewards.pkl'
                with open(rew_file_name, 'wb') as fp:
                    pickle.dump(final_ep_rewards, fp)
                agrew_file_name = str(arglist.plots_dir) + 'final_agrewards.pkl'
                with open(agrew_file_name, 'wb') as fp:
                    pickle.dump(final_ep_ag_rewards, fp)
                print('...Finished total of {} episodes.'.format(len(episode_rewards)))
                # break

                return values


if __name__ == '__main__':
    arglist = parse_args()
    values = train(arglist)
    print(values)

    vals_no_rnd = []
    vals_no_rnd.append([127.85507280007769, 133.8599958696529, 140.72331074852926, 143.31382837321627,
                        146.0440853068581, 144.60097098563696, 144.87352194433646, 145.40126281768673,
                        146.01325085505533, 145.65367438709612, 171.4438904444684, 193.1999781621102,
                        200.23934764131752, 194.12885407518013, 187.0299351576324, 181.7467307964452,
                        175.37271019282122, 167.41023878858277, 158.9656089099326, 151.1283186046608,
                        118.2603068292477, 87.24762772941244, 72.17793235148515, 69.21778691180258,
                        66.32138620042814, 63.77659379606921, 61.27406643439072, 60.75659289023811,
                        60.83541395556227, 61.7673717026178, 61.405834826322476, 62.061611547991355,
                        61.99791511192512, 61.263967031878465, 62.28537331836563, 61.33579613892774,
                        62.00964103200355, 61.09758607739424, 59.24320210025997, 57.4801869374628,
                        57.393450650653406, 57.26546372482537, 56.73861023700974, 57.82506072281541,
                        57.58315229440208, 58.48157767591506, 57.797102723942345, 57.57966618392647,
                        58.10109350179035, 58.39792875089124, 58.525022484709275, 57.703967166545006,
                        57.54169776664287, 57.0710481294234, 56.891455707483445, 56.35374809766808,
                        57.14762152840856, 58.22726252925358, 57.85844392751802, 56.93272460902963,
                        56.30484501801241, 56.29954443660293, 56.54182625060903, 56.38721751692082,
                        56.285812315819946, 56.141818727884335, 55.97572697273421, 55.328617523409605,
                        56.14472329604953, 57.61140258275368, 57.80524633842708, 58.50392004054648,
                        59.42467390084688, 60.006691936946375, 60.25917165101863, 61.12435231656377,
                        61.39171924600178, 61.216933990442676, 62.099278313010366, 61.61176018543,
                        61.36332378975571, 61.06924959058968, 60.308499341479994, 59.424191901448474,
                        59.48918480650624, 58.712080270897914, 57.93633443001986, 58.29596001141361,
                        57.0155126099863, 57.0446089659758, 57.37461077336749, 58.14777589303731,
                        58.789272702756584, 58.67079903274201, 58.99086550923609, 58.816547653426355,
                        59.40479262935443, 59.4806763727064, 59.99780508997684, 60.80295731665015])
    vals_no_rnd.append([157.34218092329556, 172.48079830183292, 173.26088750761917, 167.7967944411025,
                        163.3163472465709, 160.94322743431857, 158.8871850600791, 155.61969518390163,
                        156.1298144148748, 157.48307361832198, 183.15231840086042, 191.08845392445565,
                        186.6829124504534, 181.3807424969391, 173.66181874766397, 166.37502691163638,
                        157.28188138374088, 150.8024034965975, 140.9221466837621, 130.852654960941,
                        94.98212258246731, 74.7201399419484, 67.92641075487388, 64.27550777597493,
                        63.347558398278544, 62.34270666120773, 62.25409404721437, 61.28079640726926,
                        61.88235157178079, 61.10458090636552, 60.24379654799553, 59.89026483019617,
                        59.40413519583148, 59.13606318724732, 59.85373983379912, 59.29022678247911,
                        59.957031915871354, 59.495195794665996, 58.3114729031606, 58.4398248047371,
                        57.7083899640711, 58.75190001875859, 59.36923496914415, 58.88921792603177,
                        57.56523530382528, 57.557993959047195, 56.964124260939634, 56.68920537160651,
                        56.18879393789776, 55.27442972932408, 56.17994981425858, 55.34094224141553,
                        54.49918815089352, 55.18777939399744, 55.13008980615974, 54.65293420037002,
                        55.92168930219242, 56.074050521916746, 57.63604276615608, 58.8975757186884,
                        58.621698533087596, 59.31723691124262, 60.54994888600083, 60.47161051189627,
                        60.77663879682256, 60.59136753524373, 58.77374708884158, 58.99834643348992,
                        58.13192040086338, 56.80890985288668, 57.28683231752787, 57.143336339336166,
                        56.23976234860871, 55.714811150699255, 56.017820506297895, 55.477007553142386,
                        56.757125639249146, 57.30147277976035, 57.327024538922736, 57.75476371281513,
                        57.86782521924707, 57.64243454402624, 57.91215346413933, 58.888024426635226,
                        58.39435587426944, 58.86427596081099, 58.181368870943885, 58.19057205050309,
                        57.95286641205456, 58.13272311114012, 57.69871628593202, 57.68486535344415,
                        57.13112069191837, 56.46462794977029, 56.87835158027935, 56.652235452537234,
                        55.90355989319086, 55.58125294256575, 56.47556679320292, 55.401556969456394])
    vals_no_rnd.append([120.54100120022277, 123.9601240906123, 127.5246391140495, 132.4391930280801, 133.34457233217606,
                        134.51442013768488, 137.3760149308071, 136.0453324279979, 133.997809426049, 134.27647219425106,
                        169.2929092702869, 188.67723747790913, 185.96208666195633, 180.25108256200392,
                        173.23468112501388, 166.04008009592354, 157.24178474720068, 151.4450526157867,
                        145.27602687400608, 138.08120727991906, 95.81280424558122, 70.47041766022693, 66.11557395638197,
                        63.61077409035513, 62.4492549003405, 61.43754902117718, 60.69185049519147, 59.54299086832306,
                        60.46751750392877, 59.658410474110916, 59.941026420514234, 60.00903902734841, 60.11504864401197,
                        59.11782967840305, 59.35900268631087, 60.60820453808184, 60.951255030115355, 61.025301199014606,
                        60.17711829304726, 60.81269948046746, 61.15211738178321, 62.14304186873928, 61.16019712486086,
                        62.17271744753666, 62.318964369140886, 61.37546197191901, 60.973028508482315, 62.111125540655,
                        62.8542310630308, 62.10061403855851, 62.19867958802874, 61.14278671695574, 61.624054850723745,
                        61.78071281801648, 61.12368975807129, 61.752103320534935, 61.297145471352295, 60.47931968891109,
                        59.77336340529451, 60.93544179553549, 61.03097736257525, 61.83780118835237, 62.58187462420631,
                        61.66726019953545, 62.34022816434472, 61.59233618901034, 61.892051692925676, 61.875834743489946,
                        61.29898396241569, 60.35393205927493, 60.314349384888075, 60.445266350674366, 58.8096462774042,
                        59.886917544447186, 59.24412061065192, 60.404531599984594, 61.299797269712336,
                        61.092733161453346, 61.93696443572521, 62.501919889221504, 61.68519772212152,
                        61.408317617909816, 62.25943554591133, 62.234588178365435, 63.08106059295204, 61.798002502635,
                        60.595530907684164, 60.441599208664734, 60.078513263585435, 59.90170669688682,
                        59.821927129216775, 59.75439270606323, 59.153767987518904, 58.55770882795139,
                        57.331157358708346, 57.593791615536496, 58.841647592514406, 59.41128451351054,
                        60.72497970607426, 60.3847100770051])
    vals_no_rnd.append([149.46419426145337, 153.6740391341283, 144.36662226893907, 140.5772538231326, 139.7139294327336,
                        141.33440562383, 140.78140837167848, 140.40961575168953, 142.33747577920838, 144.75547630959673,
                        141.6870650165755, 134.3485089861644, 132.17117468937215, 129.4304738280066, 123.51074959956699,
                        116.14375682619578, 108.53241000756074, 101.6260795370361, 92.09009939133625, 81.36477844347364,
                        76.00356666271645, 73.9217934288287, 69.23951537569722, 64.79173887551049, 62.8668891978592,
                        61.31001301145172, 61.371311554507365, 60.20172888378546, 60.79368092737097, 60.47176422098701,
                        60.1738661998274, 58.62253632777768, 57.912023784117956, 57.370892771489984, 57.322167878579684,
                        57.209625205577176, 55.68300030669033, 55.667023591490924, 54.2088077610206, 53.652762819267366,
                        52.75647343281302, 53.923151797437576, 54.299579490226506, 54.61645017936937, 55.52514638067569,
                        55.61013103629343, 56.063008522747005, 56.688231048064104, 57.34360981423991,
                        57.556052889734204, 58.32804017970539, 57.75069119434141, 58.65682207827567, 59.30543648781469,
                        58.46085508440342, 57.98025300199907, 58.294525331591124, 57.616885603045986, 57.13045266558512,
                        57.73059562780383, 57.92822041086055, 57.978822886315115, 57.324284336585194, 56.56710709873731,
                        56.834528813646294, 57.1071082576432, 56.81747484567667, 57.41780767913506, 57.00452920127852,
                        56.91380626186582, 56.83528671777051, 56.92346866558933, 56.71625942577495, 57.40972744080507,
                        56.914145036258766, 56.45275502658723, 56.91099622133301, 56.59769396904267, 57.52937905815328,
                        58.049283750065804, 58.11890026483575, 57.13458771647143, 57.558946808234865,
                        57.459854029048685, 57.64174881419317, 58.615147111914546, 58.88011821936888,
                        58.220726902511466, 57.91454560796876, 57.47650355328789, 57.22289184323282, 58.242216139331944,
                        58.265766658360455, 57.98150987507547, 58.38659484307902, 57.804678818918354, 57.42041451245786,
                        58.30108179684269, 57.71816097134347, 57.910039251446285])
    vals_no_rnd.append([148.693081632186, 134.13643383567972, 132.66100565255135, 136.1650091764898, 138.7624435899395,
                        138.90334089111235, 135.41789106347676, 137.31554151459738, 139.61225416046994,
                        140.92903676301526,
                        137.98175560734785, 133.64092437966883, 132.38365603021316, 127.94257345520158,
                        119.11274178461082,
                        112.05300999592676, 106.73777856881776, 98.55566894628137, 88.77799847523794,
                        78.95189366620617,
                        73.67585129479214, 71.78187080619752, 65.76955598467751, 61.907967392507224, 62.10757109997137,
                        62.33886449147627, 62.51193271084733, 61.18954365150488, 60.80332130559286, 61.47961527096458,
                        60.89715769348773, 61.32594408253417, 60.533131965230496, 60.00170408832784,
                        59.619153959442464,
                        58.16842638671238, 57.098190190827296, 56.942836507052725, 57.17645206574694,
                        56.487668992537074,
                        55.82409246494592, 55.86074440829602, 56.157758264743286, 56.448814115507155,
                        56.868834020904295,
                        57.10538429431996, 57.45174436589651, 57.89592689003792, 58.09940841348135, 58.533652480782315,
                        57.92954393968407, 56.94527164145014, 57.66555766214048, 56.796903169472166, 55.91635496307096,
                        55.30734391282312, 54.78488156137028, 54.738042764615535, 54.214267477348706,
                        53.873187102521946,
                        54.798575766765616, 55.69706098157914, 56.26520808311681, 57.540274762442436,
                        57.93187102431709,
                        58.674327143578964, 59.29162478250844, 59.18409567916919, 59.55221073405235, 59.3005762356645,
                        58.813341301225684, 57.83453497879142, 57.030625828703094, 55.84899077300349,
                        55.571188843912566,
                        55.456801349502975, 55.00644197775952, 55.116108917873206, 55.505896975394116,
                        55.208480143147696,
                        55.971145873140316, 57.41401531475233, 57.648655550443756, 58.020570267185455,
                        58.11175442044725,
                        58.47320837387179, 58.614083356489104, 58.30696884404835, 58.32551833530787, 58.85054627390912,
                        58.4698138125738, 58.00692535861761, 58.12233085247371, 58.049704617802405, 58.02921498104723,
                        57.604250905313194, 58.459407313401584, 58.43346408922691, 57.25151681123561,
                        57.7048220788494])
    vals_no_rnd.append([114.27746370315998, 117.01326156029864, 118.13999064346343, 122.1280583573108, 126.09690627385,
                        127.66705609209659, 128.61316331472173, 128.87084517382237, 129.59708584169053,
                        130.08304466750437, 149.96704353171128, 150.85381199987506, 148.8582314479068,
                        143.4599964177767, 136.247754499337, 130.08369204992846, 122.60063302056382, 116.239492961603,
                        109.08102532943137, 101.98577043131758, 77.11349062678077, 71.20379440470612,
                        65.88520850684453, 64.33504936342841, 63.06572549977575, 61.646242232402855, 61.7617159137102,
                        61.03852179007712, 60.036944859404315, 59.82707996868769, 59.588230816784865,
                        57.96224647235815, 58.64236699375263, 58.265128051066, 58.77012353756027, 58.91986198593498,
                        58.472230008631584, 58.803854864276396, 58.94741627403218, 58.60372284187892,
                        57.744117860908084, 58.43842280616258, 58.13116470764526, 58.23447278572597, 57.93796693916157,
                        58.0176935481079, 57.37825273420468, 57.23015066086898, 57.34173926267399, 56.69457579303818,
                        57.077459978811675, 57.083370315368185, 57.25670708978845, 57.87803520873694,
                        57.20864457875473, 57.44569673833513, 58.39365577506519, 58.06101733430804, 57.884141156318336,
                        58.8922832590181, 58.87776713089252, 59.25091461819781, 59.929706986114795, 59.282711985075224,
                        60.33642428407125, 59.93216130242856, 58.98430459225572, 59.32907610732307, 59.697124526881204,
                        59.54357366243843, 59.223047667400365, 58.78055975620095, 58.05152241819307, 56.98853772765052,
                        56.78565782822571, 56.904299052275384, 56.89043632714092, 56.15894821491756,
                        56.375161496262876, 56.27189101083209, 56.24431917547939, 55.724207237758016,
                        55.967548167232366, 56.9748792964463, 56.48081683176917, 56.46465974622723, 58.21666994730079,
                        58.56490348354793, 58.06601107411058, 57.62225469207684, 57.750021708135854, 58.71001356375396,
                        58.00383107181857, 57.4113150133294, 57.161623558613414, 56.54059253393091, 56.1076466288587,
                        57.35904538110804, 57.49958380460576, 57.19227769391646])

    mean = []
    std = []
    for i in range(100):
        array = []
        for j in range(len(vals_no_rnd)):
            array.append(vals_no_rnd[j][i])
        mean.append(np.mean(array))
        std.append(np.std(array))

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        # for i in range(2):
        meanst = np.array(mean, dtype=np.float64)  # mean[i]
        sdtt = np.array(std, dtype=np.float64)
        # for i in range(6):
        #     ax.plot(epochs, vals_no_rnd[i], label="run " + str(i), c=clrs[i + 1])
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_no_rnd.png")

    plt.cla()

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        # for i in range(2):
        meanst = np.array(mean, dtype=np.float64)  # mean[i]
        sdtt = np.array(std, dtype=np.float64)
        for i in range(6):
            ax.plot(epochs, vals_no_rnd[i], label="run " + str(i), c=clrs[i + 1])
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_no_rnd_all.png")

    vals_extra_1 = []
    vals_extra_1.append([135.569488692480, 158.9172543036480, 158.2424899745680, 153.0222872743200, 149.2983509347170, 148.117221341125, 148.1950820259731, 147.0474210395356, 146.7612195735687, 147.5719147679703, 170.39100843484997, 180.06962329441433, 187.92539173244973, 183.57719579048472, 178.36235712488687, 172.17977274812688, 165.77007573163257, 157.73799775708176, 149.71933901862965, 140.38019655826554, 110.35651925792399, 88.45369933791598, 71.01656934380131, 67.80178564567896, 64.93407179319836, 62.08442042536645, 59.504026152444546, 59.64266126392121, 58.15526401006645, 58.40916453967013, 56.72297271201656, 56.003439010770485, 55.50492170869488, 54.25871795831033, 54.42678730165145, 54.29185794289243, 52.87062383826145, 51.61742645552104, 50.979201641905284, 49.17883167428017, 48.85241388972914, 47.42450554624195, 46.58115540294134, 45.967935135465936, 44.523423684512906, 43.51300140107263, 43.60566125075423, 43.778184978007225, 44.556047994359815, 44.90600044482876, 45.05920944010129, 45.420845087335564, 45.30874270328542, 45.0510780291571, 45.70125753767467, 45.93433781064883, 45.48848297385423, 44.67451412534564, 43.76408196672775, 42.65246670606846, 41.8498981159028, 41.15726697179963, 41.43490686639266, 41.21333423621551, 40.96513842879228, 40.62784968978255, 40.0763216357839, 40.05783636531672, 39.98771853569035, 40.60378566209671, 41.18880084612579, 42.02402577467402, 42.22662859279963, 42.19200615925467, 41.920203827014895, 42.61104287112074, 44.05082742607691, 44.05917576079813, 44.45856971951928, 44.29052528289614, 44.18885489628947, 43.23034778508976, 43.203493607316766, 43.505888220230666, 44.354749960709945, 44.198715704286094, 43.28095545045006, 42.94511918776081, 43.28240877711009, 43.91604810190973, 43.84490457904503, 44.68197252508863, 44.34325578160472, 43.907311203489066, 43.12598786206398, 42.95111433792462, 42.93341288002778, 43.433564859477585, 42.70527579180488, 41.91251731728368])
    vals_extra_1.append([133.81403784273996, 134.3065990472864, 135.2687804567020, 135.532041922552, 134.473927850759,
                         134.91187408466814, 137.18332915859023, 135.87820098588801, 136.87507897096586,
                         137.24750146148187, 134.88958880106975, 133.79566023759585, 129.8611790145993,
                         125.1789474122937, 121.30952025768876, 114.64066903537287, 106.94376704236332,
                         100.52350985540902, 92.61437693793411, 85.33953812268574, 80.95331441469843, 74.79020461010954,
                         70.44146334979948, 68.14816772120432, 65.0074440037184, 63.521227535089885, 61.316218384999395,
                         59.7691475564605, 58.16666867580265, 56.451723362337965, 55.04721119969063, 55.07282466257986,
                         54.24621639421266, 52.49236015605342, 51.6531933223872, 50.5049252489394, 50.10095021383342,
                         49.541843306424305, 49.41613834837591, 49.57829298529854, 48.61875061332117,
                         47.243661175294356, 46.655488546203756, 45.42287572182795, 44.724121537637146,
                         44.75558086295611, 44.602021692900166, 44.73063652424872, 43.83254882828008, 43.11390752263011,
                         43.04670392314503, 43.15847919450902, 43.40035770189256, 44.42499382643076, 44.15291511914776,
                         43.95753082310079, 43.567806192259525, 43.82023726745454, 43.85183187403399,
                         44.506850699851405, 44.86337246370394, 44.25564170265009, 44.079066505636355,
                         43.73156614803619, 43.66690382323971, 43.799991500142184, 43.13202117860508,
                         43.286646120277425, 43.5375624036631, 42.7142709486732, 42.15013833099247, 42.09196461613791,
                         42.38723606296456, 42.226719682252615, 42.52392910316655, 42.65423397103685, 42.78433254552079,
                         43.03102049722031, 43.23884372862436, 43.6896047072356, 44.54076255429881, 44.455334338024734,
                         44.05609208476817, 44.1591882754192, 44.16864248172048, 43.38530208879417, 44.21367039018821,
                         43.81302609139924, 44.22819498784542, 43.72852885463199, 43.04275664726873, 43.725793020617665,
                         44.13353794269123, 44.54552587497742, 43.587146679696744, 44.00105878844499, 43.16572428313072,
                         42.583026181865044, 41.67464083809814, 42.029487558646395])
    vals_extra_1.append([140.06882092763854, 136.7171233069886, 142.54127659492943, 147.2408758108524, 147.82596887863,
                         147.22432188707378, 149.80601910387094, 145.81049883790095, 144.22246680907767,
                         146.31935672507208, 147.289836401143, 149.24263680450338, 146.911813599872, 138.10237813553226,
                         129.7640520251295, 122.43928292912723, 112.0886879812632, 106.17421054062957,
                         99.09731897809377, 87.62835130858791, 79.1892814265755, 70.63400806619309, 63.644251011739556,
                         61.902503791436075, 60.82381718627373, 59.901811869173, 59.42032771770109, 59.7399149251157,
                         60.06403363804023, 59.89353472509171, 58.71665535141911, 57.64287659167487, 57.500086595615215,
                         57.25040652751722, 56.97625161803373, 56.806736617661606, 56.201689543424294,
                         56.75194827084393, 56.034965026288525, 57.35688192310029, 57.34176894755111, 57.5140502476454,
                         57.50865516045339, 58.09711861616222, 58.25454992027212, 58.684667890353374, 58.98840703729762,
                         58.41272383971352, 58.4195053791779, 58.87370860182514, 59.34124231108764, 59.68246118232253,
                         59.554523990749736, 60.07829549495912, 59.86546105593321, 60.01993261823927, 59.2255045636651,
                         58.5732183626055, 58.801198648089006, 58.328059825536926, 57.58748967989782, 58.50298963346349,
                         58.40122168324309, 58.57300426127474, 59.23435752434521, 58.70253932273917, 59.334468249205386,
                         59.879872733463316, 60.156868956766836, 59.24122978104715, 59.37679008293134,
                         58.549239405916815, 57.91543542822859, 57.33646227461431, 56.94942479323848, 56.85678111165213,
                         57.35149244952078, 57.143054166387785, 56.26201261981337, 57.30580752973353, 56.62974881655618,
                         56.761039371065216, 57.728680590052385, 58.14545209767163, 57.862819052315636,
                         58.43723131365866, 58.20352285570509, 58.32832565993053, 58.77848292275491, 57.83702192856102,
                         58.52673916836446, 57.73946260265833, 57.10558259210441, 55.97848691952442, 56.54795437533195,
                         56.10073710116351, 56.0075153393514, 56.32714097059493, 56.345040065876546, 57.29257296490756])
    vals_extra_1.append([147.64701914801725, 161.7973794839033, 168.5333984446728, 170.24948230872033, 171.72992227695,
                         173.4288509515861, 176.05291321652888, 176.88521291018995, 175.0172612672133,
                         173.48689055338198, 195.97244975936755, 209.83407610801711, 206.00338749388183,
                         213.13937423576812, 208.32630898567007, 206.07672719198337, 195.6350734131367,
                         185.28441232323533, 176.39128736316317, 167.0049713304363, 134.25518266270964,
                         111.90595065338144, 103.65247067278175, 85.8827365933999, 78.83758653708192, 69.46888253123026,
                         67.04350838425245, 65.39557914106904, 64.89769169373712, 65.24873666141065, 65.11650862473512,
                         63.12022679978881, 63.032801754605124, 61.73233858825588, 62.03247134746483,
                         62.196060588819016, 62.305257386176685, 61.7665692995976, 61.49922488141155, 60.16266931945052,
                         59.92941858770904, 59.869334457295366, 60.001947719056766, 60.20199552160206, 60.9733757212661,
                         59.979218958303214, 59.963427194481596, 60.07908606638589, 59.856116259532676,
                         59.65738388867716, 59.743182737986494, 60.07638806126507, 61.156166799699946,
                         60.88050428512947, 59.67152328779669, 59.92995591690147, 60.117748151909254, 60.62667351916375,
                         60.376560691982874, 60.279182936173456, 60.527945624495025, 60.68885412731092,
                         60.301073482339405, 60.70811138640388, 60.94389281151929, 61.06417803381139, 61.30413811908445,
                         60.916291924688856, 60.573430907981, 61.23863362122978, 60.259033568107355, 60.191484587067436,
                         59.803133848510356, 60.40132536183186, 60.2287014427012, 60.32352024468212, 59.472386935349725,
                         59.346488930164355, 59.4624533630585, 59.549269269254765, 60.36534617266421, 60.31581362948812,
                         59.84231051606695, 59.398798165323036, 59.48509700553768, 59.55750598315096, 59.57762512166636,
                         59.87434615390435, 60.93757559829511, 60.198735208842024, 59.52769229032726, 59.12438350595881,
                         59.9086008421149, 58.59101031914863, 58.68095451145368, 57.95980405046018, 57.98174883139351,
                         57.285691077081005, 56.49936572017272, 57.37379274553426])
    vals_extra_1.append([139.87137137692287, 139.6265576813976, 142.2929947399759, 142.618931487713, 142.039073804951,
                         143.2749661912037, 144.64530787502275, 144.18220468027823, 144.3137820556121,
                         142.6914395231168, 160.50623332917232, 191.49380932047333, 207.52163879270654,
                         206.38747535117196, 201.10651786503655, 193.71540593578678, 186.26645341848584,
                         179.1223333572943, 171.62650504156974, 166.17302948348947, 140.79438604538927,
                         102.17070463733224, 78.1519652487186, 70.26966482668192, 68.21455914228946, 67.18145434733289,
                         65.27073704188346, 64.22366625148011, 63.01973783592727, 61.8694406554421, 60.72509900828554,
                         60.36330320707048, 59.94369137315898, 60.27513710235922, 59.63275342109771, 58.563105016788704,
                         59.74692103922866, 59.458546998648934, 60.1182534154708, 60.422931160916626, 62.03222475242127,
                         61.96449359457176, 62.01921402510732, 62.11688773032208, 61.08237475768193, 61.416945462258234,
                         61.1581810161516, 61.30652771437771, 61.572439449638324, 60.872424238307694, 58.89501178810099,
                         59.84931237119124, 60.39442002597086, 60.38386795253647, 61.83152340452306, 61.56326535956004,
                         61.48247744504849, 60.944084396225534, 60.71612072109383, 60.86375637069215, 61.40154507258855,
                         61.00540015045322, 60.39790831776897, 60.063517111252644, 59.400323591928775,
                         59.95985017914547, 59.89248666712582, 60.832056016605286, 60.167174646801634,
                         59.47761579197887, 59.40037041129812, 59.079014718381764, 58.36763477281619, 58.85905298694246,
                         58.17624565634608, 57.49623050193136, 57.64142447802695, 57.71644875970538, 57.86557916029609,
                         59.00853684606003, 59.861408281568096, 59.698913841154265, 60.80930830635702,
                         60.67036254816551, 60.595026958778924, 60.7585816534685, 60.29560139313063, 59.30887111644432,
                         59.56244198557154, 59.08629693248453, 58.02444565681192, 58.24509122657895, 57.52127100028121,
                         57.34365135747711, 57.73829901437295, 57.473249114958286, 57.970919204707705,
                         58.30266318835446, 58.16015088342466, 57.800360359802085])
    vals_extra_1.append([117.93207615248015, 117.8827298524277, 127.2780702393740, 131.995317324977, 131.7761746479098,
                         130.5055982499677, 130.19297740611887, 129.79236623035095, 131.03879705078722,
                         132.4725445358149, 172.53811365879568, 188.12997478652036, 184.70999609568563,
                         180.5716247570256, 174.3152078833399, 171.03886997603576, 168.95499395207665,
                         163.9437500481545, 157.63423138386386, 150.3924981378196, 105.49367254005034,
                         85.31035798284209, 80.98129547128498, 76.68696603628271, 77.13414115023691, 74.13858697256903,
                         68.50310311125361, 68.06488391745793, 65.95481568368976, 63.72668412382718, 62.01692453619898,
                         61.83245060211703, 60.25031264475687, 60.09331043604529, 58.92575246153955, 58.679740856231945,
                         58.422759458210685, 57.99341760035125, 57.398548931298514, 58.23341704986686, 58.7556388501714,
                         58.26543884173859, 59.00810226194517, 59.534808946278616, 59.016153588650646,
                         59.06158189938008, 59.58899429450736, 59.34151154588931, 60.61726471738528, 59.56937015697051,
                         59.616757983129105, 59.312901613504785, 59.443543885601805, 58.44894162583947,
                         58.28274731644779, 58.78537330948556, 58.37331831812261, 58.00002234289918, 56.953571915209075,
                         58.216571790366224, 57.79898601256865, 57.32446057556318, 56.65406555639609, 56.68653110400755,
                         56.757069290602, 56.22822346411209, 57.222790209868776, 57.51720868754922, 58.45282658466041,
                         58.78591595981925, 59.24904875412531, 59.86567259382091, 60.92073819256098, 61.56627583930147,
                         61.81159925361293, 62.85591842679291, 62.92666466896387, 62.634453463674525,
                         61.847488803903715, 60.668769795369464, 60.120245775935665, 60.462043989262355,
                         60.1784851496314, 61.05384809527295, 61.212034626527405, 60.530902413516806, 59.81164140523576,
                         59.37485528328645, 59.93828413582027, 61.079079441316914, 61.55008176350295,
                         60.846856655104716, 60.53737892495797, 59.47852161203583, 58.806674848993154,
                         58.19933051333588, 57.912038019680985, 58.52309036701784, 58.46529923589349,
                         58.36388200202931])

    plt.cla()

    mean = []
    std = []
    for i in range(100):
        array = []
        for j in range(len(vals_extra_1)):
            array.append(vals_extra_1[j][i])
        mean.append(np.mean(array))
        std.append(np.std(array))

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        meanst = np.array(mean, dtype=np.float64)
        sdtt = np.array(std, dtype=np.float64)
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_extra_1.png")

    plt.cla()

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        # for i in range(2):
        meanst = np.array(mean, dtype=np.float64)  # mean[i]
        sdtt = np.array(std, dtype=np.float64)
        for i in range(6):
            ax.plot(epochs, vals_extra_1[i], label="run " + str(i), c=clrs[i + 1])
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_extra_1_all.png")

    vals_extra_2 = []
    vals_extra_2.append([138.46683804210, 142.875994515020, 141.792088678183, 141.450622404165, 140.663733649116,
                         143.31159556100602, 144.46728164606986, 146.2851622817082, 146.15034619558682,
                         146.25767219777515, 168.55712763205426, 169.67693764643, 171.80233008264094,
                         167.1019325890732, 164.06326876394346, 156.79687681533343, 150.5145530646009,
                         142.70255223012884, 135.16258441672474, 127.43383261707494, 97.34522284413988,
                         88.86133723964201, 78.72128990556386, 75.53584752827365, 69.79420934183564,
                         67.54132246336728, 64.13982262259677, 62.135786254350755, 61.647301946103006,
                         60.78197719671327, 60.50794102914176, 59.64606298282083, 59.58014432580353,
                         59.49158344158942, 60.53581409897907, 60.53016713320471, 60.95063795827198,
                         61.6461094506345, 61.01032752058488, 61.38710068410018, 61.43051716755539,
                         61.52992086820144, 61.43180760125605, 60.88280660035428, 60.85605266139846,
                         60.97150348809795, 60.703702311638274, 60.008363297030456, 60.236794604255735,
                         59.736854308004716, 60.35830264401904, 60.11586741525317, 60.52433695358372,
                         60.64050476082298, 61.281953137848994, 59.975234979776424, 60.80018690668821,
                         60.972885457968914, 60.36308793759933, 60.7443599251491, 60.1970810110124,
                         59.29909783008972, 58.93978245236776, 59.00192645805405, 58.050598376641375,
                         59.15905509109106, 58.33947248592087, 58.43870083314311, 58.621555985494176,
                         58.11828128289832, 58.36818073374186, 58.73506102880638, 59.76151440408532,
                         59.385459456314386, 59.3806828867891, 59.82436048668086, 60.49134951764032,
                         60.75024693883874, 61.32104383248035, 61.39940812746111, 61.2083818466089,
                         61.19279893020324, 60.370238808699284, 60.01590728077952, 60.08850283560214,
                         59.326381491516265, 58.146231025075465, 57.700461800323346, 57.52241735761665,
                         57.95513596183323, 58.160294027595256, 58.02122237468033, 58.01362363309211,
                         59.2823612571719, 59.266097292025094, 59.53134830910433, 59.76710869570587,
                         60.31582902910032, 60.089868830850676, 59.24803890027923]
                        )
    vals_extra_2.append([153.981448031506, 153.322579129183, 153.242528026296, 150.497918784872, 150.59290075214,
                         148.77858268025565, 149.39451687780092, 146.74078271320758, 143.82121044753424,
                         144.40161935357537, 180.47980138218065, 203.81911707647907, 207.1090045677307,
                         228.29874215932634, 224.11845318734814, 217.40676775442145, 211.39334619272068,
                         206.9470734125724, 201.4299632131575, 192.2732024812862, 147.4255680941772,
                         116.50157355365613, 103.04006999447137, 74.09923743132418, 69.27302765615012,
                         67.96370739807587, 65.15173590872907, 63.53602666391424, 63.53145619200488,
                         63.507347919567216, 62.012437701801225, 61.45931798273141, 62.36549859195075,
                         62.26232470164662, 62.082021924960344, 62.0249226398731, 61.30869596513762,
                         61.08874576571217, 60.93748625461944, 61.39267892568972, 61.344121932211856,
                         60.2077338281927, 60.582628685228535, 60.43699223223781, 60.64767591527278,
                         61.23989200714576, 61.178989305783915, 61.11142246620501, 60.81728448711424,
                         60.89980945363581, 61.07143668723545, 61.646299208426484, 61.074727835842815,
                         60.82371968061422, 61.34078280954143, 61.194266329156235, 61.261813367318126,
                         60.838933052357596, 60.548756603800534, 59.98982551937719, 59.9523145438605,
                         59.54554412385316, 59.50504151594454, 60.1128974831755, 59.145966391883825,
                         59.16947601609784, 59.77087805769555, 59.301455732592075, 60.03252730038037,
                         59.74825608867357, 60.031672047619736, 59.32572358267648, 58.5775018498834,
                         57.64736679186688, 57.66773611687932, 57.148517508938994, 57.49954278593361,
                         57.89362535014315, 58.083309075717466, 57.89365418433186, 57.762511485436306,
                         58.67019609384939, 59.808472986185954, 60.295581421905446, 60.668160867086016,
                         61.1414310501109, 60.58384612814716, 60.33316539909517, 60.3325201313295,
                         61.46491589781401, 60.863999730384286, 61.27243877430736, 60.77197247331896,
                         60.275844598950414, 59.512371472202986, 59.52935028072876, 59.94643968081666,
                         59.12787142221132, 59.28586956334917, 60.093856407024255]
                        )
    vals_extra_2.append([153.351630099400, 145.22599717618, 145.693329425273, 142.504722082286, 142.72404697462,
                         140.39286233025905, 139.0172425623049, 140.75580312361524, 142.39038270711404,
                         142.31579882365008, 140.5078714091903, 136.94030696316239, 131.17992034645698,
                         127.93340150605647, 121.49728984344763, 114.66300763489609, 108.03910948928748,
                         99.05658377583369, 89.68351141471301, 81.31961369099089, 73.95257361313237,
                         69.2675667753716, 64.77866211852398, 60.35772875357601, 57.24942552351517,
                         55.97584934001572, 54.03851389789317, 52.52981304053417, 51.093557459354585,
                         49.48039510928899, 48.061078288188554, 46.76627274996959, 46.264180024954406,
                         45.683997222589824, 45.06318601209479, 44.95577841552944, 44.33517205627005,
                         43.93437056737568, 43.634774253804, 43.525026795006774, 44.065338421937085,
                         44.48085430991862, 44.18383658825979, 43.75213495851058, 43.42675823689949,
                         43.2217548363353, 43.63830075126588, 42.95445404821137, 42.71984340460433,
                         43.00726271570065, 42.02047850718991, 41.171003154838004, 40.8688504325128,
                         41.519213294183444, 41.67546083348971, 41.71734609793194, 41.89525085272676,
                         42.885541137761315, 43.12822082882881, 42.83593973878122, 42.166210139490026,
                         42.996828155399186, 43.10819527143447, 41.90825918920368, 41.64171230577068,
                         41.547970741661715, 40.55733068992361, 40.129241261142205, 40.25137948117152,
                         40.08733496725986, 40.31198501648659, 40.12237622712017, 39.94807778374431,
                         40.52961037837274, 40.81100582430958, 39.982336590320166, 40.67861874326717,
                         40.9712962404786, 40.672370082762164, 40.47350768528219, 40.74966433745871,
                         40.305968984887876, 40.3480551062669, 40.78295362789669, 40.83552406174038,
                         41.66510834609976, 41.292660039183914, 41.338904407944575, 42.10326268479274,
                         42.38056393262095, 42.410115861474026, 42.66160361545839, 42.56197904277606,
                         42.33809328561365, 41.96605819210721, 42.45833387762692, 43.12154804620791,
                         43.192910686302476, 42.774566728584716, 43.10003449803173]
                        )
    vals_extra_2.append([156.010514224630, 149.50285358641, 142.047000200068, 142.44797121786, 143.197187814937,
                         144.24414115688108, 144.85267372240315, 143.49775335700832, 143.27448570040147,
                         145.32035867387125, 142.9209499961202, 138.6359682629876, 134.38719718150898,
                         127.0239702760642, 118.60480606643836, 110.29761142182392, 102.80951631407821,
                         95.37106561827031, 87.62912061090759, 77.77470131155104, 70.19521996635076,
                         66.0463874813302, 63.16654298624597, 63.18226432396028, 62.10702342505289,
                         61.51733676783596, 60.165143449618114, 59.656674249322116, 59.314435028352655,
                         58.766192204226414, 59.884758849159596, 60.28322640295938, 60.24798684916469,
                         59.704354552035426, 60.03609282950995, 59.38072834221412, 58.269299957270775,
                         57.9318189293117, 56.76584057683443, 56.26659028844471, 54.61244893142235,
                         53.08990380432917, 51.95740930228754, 49.88636090932613, 48.759490344065824,
                         47.40865191330591, 47.29645532343023, 47.222581814046485, 46.1302622277215,
                         45.26162535737584, 44.8474911636825, 44.77653153107113, 44.712519587514585,
                         44.488758955692525, 44.26686428737166, 44.8338619893258, 44.843637034437855,
                         44.43828069653298, 44.96393125211161, 44.56773390755431, 43.894076220586705,
                         43.37431281248206, 43.14312724851348, 43.05188497066512, 43.12616398828831,
                         43.18276247393441, 43.144775689022644, 42.90307924471816, 42.76536664208522,
                         43.282304573205444, 43.845092179535875, 43.74396578684566, 44.19559969471207,
                         44.22654609828416, 44.22444720938296, 44.681300790368034, 44.793639648809716,
                         44.525630500728994, 45.16061846853289, 45.08816904706551, 43.712533005248936,
                         44.3847639170377, 43.29760707904404, 43.5051214880254, 43.3881820779119,
                         42.838015701605904, 41.939244792936826, 42.29667469332008, 42.27484907305272,
                         41.412796914340284, 42.17183928141205, 41.5355713544949, 42.84574546365778,
                         42.7980119650077, 42.404404410224366, 42.428892457141764, 42.94471663436483,
                         42.56445996572893, 41.88987842280323, 42.17601726527963]
                        )
    vals_extra_2.append([124.992537191207, 125.083601262131, 132.919480387224, 138.123146385256, 137.578811343064,
                         140.3167586934449, 137.9506225184989, 138.24552764303, 141.765213142284,
                         142.15787396108848, 145.8741635755009, 152.95302982957443, 147.1147680016319,
                         143.53090052045755, 140.42026106482646, 132.53377603120273, 126.51620055336292,
                         118.8630353413001, 107.57374960535182, 100.27683849474168, 90.28753303158743,
                         76.48038905821423, 74.01989309335502, 68.89017844327122, 64.91595372301886,
                         63.310759470090446, 61.91928042657196, 61.534208015477006, 61.562956289471586,
                         60.75743206515196, 60.01776241031317, 59.79695820154063, 59.41777281159049,
                         59.46966000519534, 58.754877924229646, 59.25697212355731, 60.29317220730008,
                         60.25393105705866, 60.13850359777731, 59.69167457726945, 59.38377180152731,
                         59.58090503090825, 59.327610083917634, 59.0170914865428, 59.08208124950718,
                         58.96768096284184, 58.71735020027142, 59.19575557644929, 58.95921825563186,
                         59.041133828477584, 60.09511114764994, 60.39214123222006, 60.396722713693684,
                         60.92140570701723, 60.375962849313495, 59.61696278545738, 59.24496262851901,
                         58.28614460652751, 58.81158757701243, 58.70741789141963, 58.24392529006017,
                         57.468736734632316, 57.028829451110184, 56.077852945253355, 56.75860586140956,
                         57.95433268582737, 58.54572478043345, 59.18313895654662, 59.34538453206781,
                         59.761415985204806, 59.875984625638694, 59.94016808028962, 60.19600177655215,
                         60.96068092031393, 60.67214128842842, 60.066701571464016, 59.9025367395442,
                         58.87406375801236, 59.011229652947165, 59.15817910209694, 59.59568077072364,
                         59.57410870283306, 59.71971345559233, 58.864769982061986, 58.654267093711965,
                         58.51220997852298, 58.150795681682474, 59.1818403290742, 59.36088552712359,
                         58.76216125752, 58.35480030283051, 58.50197285569711, 58.14580377657933,
                         59.30142921683756, 60.03105508271393, 60.11196985039731, 59.369316574984225,
                         58.80734259076549, 57.96584782930248, 58.8414876330062]
                        )
    vals_extra_2.append([142.381246352712, 141.64141294243, 145.284296323708, 145.81128898177, 143.526294019418,
                         141.38015952865194, 140.72899799761808, 141.2765644025324, 141.0177699522683,
                         142.11033987557852, 160.48266139031546, 169.2379260977977, 166.9782856700984,
                         164.9008044037153, 159.61516436142264, 157.51654594779498, 151.3364830036941,
                         144.7149043058073, 138.43469616085787, 129.7432895553823, 103.18160903671858,
                         86.49966443381417, 79.57354076753853, 72.82109938586693, 69.91920181462152,
                         64.80482273581656, 62.26365590902693, 59.256278887626394, 56.58209557217181,
                         53.8573046081317, 52.44772685790056, 50.9255845182915, 49.8249473910068,
                         48.42834980046656, 48.04940282959711, 47.00347765236431, 46.077502296603605,
                         46.07225430142194, 46.11939261258718, 46.73978245845688, 46.48848979981318,
                         46.61664156328452, 46.713885883722426, 46.138842725046864, 45.38295016631212,
                         45.59109832845214, 45.506105904391895, 44.90097103610194, 44.65500033053811,
                         44.20715644484218, 44.116853971437536, 43.44663633748426, 42.72738284305607,
                         43.04479082506819, 43.109220869618916, 42.783656707726756, 43.01343331315339,
                         42.963137347832266, 42.076491851332584, 42.384641414615096, 42.70576015034868,
                         43.658852927019915, 44.766234728014744, 45.31595308236168, 45.340016994484785,
                         45.46250106671652, 45.27956675229357, 45.86143351646309, 47.381629149511184,
                         47.44709233040871, 47.28189585342536, 46.904813552677965, 46.31650011510463,
                         45.948041313009846, 47.017207603850316, 47.14654924109194, 47.40634927721173,
                         47.158805254792576, 46.1257703677505, 45.87888516980556, 46.084897573729606,
                         46.33565509421654, 45.06445010622305, 44.44085656128228, 42.82366542126162,
                         42.102726548608665, 42.08259231825603, 42.45535736481833, 42.697458850534346,
                         43.14466204431355, 42.745549851444466, 42.578030024741125, 43.253306454906735,
                         43.301308810538785, 43.3717487579663, 43.77981432735641, 43.533743019466314,
                         43.04036422851503, 42.69752231532776, 42.37575324415952]
                        )
    plt.cla()

    mean = []
    std = []
    for i in range(100):
        array = []
        for j in range(len(vals_extra_2)):
            array.append(vals_extra_2[j][i])
        mean.append(np.mean(array))
        std.append(np.std(array))

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        meanst = np.array(mean, dtype=np.float64)
        sdtt = np.array(std, dtype=np.float64)
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_extra_2.png")

    plt.cla()

    fig, ax = plt.subplots()
    clrs = sns.color_palette("husl", 7)
    with sns.axes_style("darkgrid"):
        epochs = list(range(100))
        # for i in range(2):
        meanst = np.array(mean, dtype=np.float64)  # mean[i]
        sdtt = np.array(std, dtype=np.float64)
        for i in range(6):
            ax.plot(epochs, vals_extra_2[i], label="run " + str(i), c=clrs[i + 1])
        ax.plot(epochs, meanst, label="mean", c=clrs[0])
        ax.fill_between(epochs, meanst - sdtt, meanst + sdtt, alpha=0.3, facecolor=clrs[0])
        ax.legend()
        ax.set_ylim(0, 200)
        ax.set_yscale('linear')
        ax.grid()

    plt.savefig("train_extra_2_all.png")

    vals_extra_3 = []
    vals_extra_3.append([129.7817694791307, 130.9618496314959, 128.3707193144440, 137.7457933339539, 132.644938033468, 128.97383979034427, 129.92421507730194, 130.66899184980076, 131.43456853784826, 133.55869875595425, 151.96947475714393, 151.62296420432713, 148.90104778940068, 142.71578990110595, 139.03961192800506, 136.6619191334316, 129.36625309345075, 122.06338539885205, 114.92082534565276, 105.03818397513024, 79.3922166242472, 73.4511527809957, 69.94602484259588, 66.16981688212057, 63.95337254740142, 62.04491043045702, 61.92940280651482, 61.60843465257918, 60.80714279764415, 60.9992810622222, 60.518609823254515, 60.264221655092, 60.022589171848665, 59.507213334246934, 60.310779108148544, 59.24076855694996, 59.02634476447319, 58.84403227366682, 58.99053322631576, 59.47183437071677, 60.46788687823563, 60.67344088704713, 60.47138403878051, 60.19431420539258, 59.873271415097086, 60.055172426266815, 59.86282334230825, 59.44138346374071, 59.754702386823745, 59.18640393345016, 58.93423154779974, 58.79901448026826, 60.302206332849074, 60.237317009874054, 60.34918870018018, 60.44872390100645, 60.77908314003937, 61.71401343457564, 60.927591006175916, 60.56147971205869, 60.42979477076589, 60.145408185304056, 59.2761870140815, 59.714607597584106, 60.395667454106416, 60.46883487288336, 59.885824819845865, 59.20920736121258, 59.82657647332785, 59.39793652246921, 58.62902165805645, 58.947983228884404, 58.12825182890086, 57.88078360450643, 57.11053853967324, 57.24607661746186, 57.90909110078489, 56.823309269057646, 57.10603913823579, 57.679910064667084, 59.4922553593608, 58.77744283031329, 60.094526289992295, 59.557118393906, 59.60468203439558, 58.91794349479558, 58.89810253868715, 60.21760829911463, 60.25294169011668, 59.83880425411367, 58.85249915684767, 59.139481732480135, 58.07730384339572, 57.91875580756523, 57.812677289187356, 59.0511471878905, 59.029547654925224, 58.64666415201073, 58.443614235803224, 59.49780479732917])
    vals_extra_3.append()
    vals_extra_3.append()
    vals_extra_3.append()
    vals_extra_3.append()
    vals_extra_3.append()

    vals_with_rnd()
